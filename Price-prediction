import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Step 1: Download stock data
df = yf.download('AAPL', start='2015-01-01', end='2023-12-31')
df = df[['Close']]

# Step 2: Normalize the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(df)

# Step 3: Create sequences
def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(len(data)-time_step-1):
        X.append(data[i:(i+time_step), 0])
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 60
X, y = create_dataset(scaled_data, time_step)

# Step 4: Reshape input to LSTM format
X = X.reshape(X.shape[0], X.shape[1], 1)

# Step 5: Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# Step 6: Train the model
model.fit(X, y, epochs=10, batch_size=64, verbose=1)

# Step 7: Predict on training data
train_predict = model.predict(X)
train_predict = scaler.inverse_transform(train_predict)
actual = scaler.inverse_transform(y.reshape(-1, 1))

# Step 8: Plot results
plt.figure(figsize=(10,6))
plt.plot(actual, label='Actual Price')
plt.plot(train_predict, label='Predicted Price')
plt.legend()
plt.title('Stock Price Prediction using LSTM')
plt.show()
